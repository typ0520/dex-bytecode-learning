/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'tong' at '17-11-29 下午6:28' with Gradle 2.10
 *
 * This generated file contains a commented-out sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/2.10/userguide/tutorial_java_projects.html
 */

// Apply the java plugin to add support for Java
apply plugin: 'java'

// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    compile 'org.slf4j:slf4j-api:1.7.13'

    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    compile 'com.google.code.gson:gson:2.8.1'
    testCompile 'junit:junit:4.12'
}

sourceCompatibility = "1.7"
targetCompatibility = "1.7"


task genDex(dependsOn: [build]) {
    File dexPath = new File(project.rootDir,"assets/classes.dex")

    println dexPath
    File classesDir = new File(project.buildDir,"classes/main")
    ProcessBuilder builder = new ProcessBuilder(
            "/Users/tong/Library/Android/sdk/build-tools/26.0.2/dx"
            ,"--dex"
            ,"--output=${dexPath.getAbsolutePath()}"
            ,classesDir.getAbsolutePath());
    Process process = builder.start();
    int status = process.waitFor();

    BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
    String line = null;
    while ((line = reader.readLine()) != null) {
        System.out.println(line);
    }

    reader = new BufferedReader(new InputStreamReader(process.getErrorStream()));
    while ((line = reader.readLine()) != null) {
        System.out.println(line);
    }
    System.out.println("status: " + status);
}